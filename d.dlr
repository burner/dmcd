S := CmpExpression;

CmpExpression :=
	ShiftExpression;
	| ShiftExpression equal ShiftExpression; {: ret = this.cmpExprAst(); :}
	| ShiftExpression notequal ShiftExpression; {: ret = this.cmpExprAst(); :}
	| ShiftExpression is ShiftExpression; {: ret = this.cmpExprAst(); :}
	| ShiftExpression bangis ShiftExpression; {: ret = this.cmpExprAst(); :}
	| ShiftExpression less ShiftExpression; {: ret = this.cmpExprAst(); :}
	| ShiftExpression lessequal ShiftExpression; {: ret = this.cmpExprAst(); :}
	| ShiftExpression greater ShiftExpression; {: ret = this.cmpExprAst(); :}
	| ShiftExpression greaterequal ShiftExpression; 
		{: ret = this.cmpExprAst(); :}
	| ShiftExpression bangsquareequal ShiftExpression; 
		{: ret = this.cmpExprAst(); :}
	| ShiftExpression bangsquare ShiftExpression; {: ret = this.cmpExprAst(); :}
	| ShiftExpression square ShiftExpression; {: ret = this.cmpExprAst(); :}
	| ShiftExpression squareequal ShiftExpression; 
		{: ret = this.cmpExprAst(); :}
	| ShiftExpression banggreater ShiftExpression; 
		{: ret = this.cmpExprAst(); :}
	| ShiftExpression banggreaterequal ShiftExpression; 
		{: ret = this.cmpExprAst(); :}
	| ShiftExpression bangsmaller ShiftExpression; 
		{: ret = this.cmpExprAst(); :}
	| ShiftExpression bangsmallerequal ShiftExpression; 
		{: ret = this.cmpExprAst(); :}
	| ShiftExpression in ShiftExpression; {: ret = this.cmpExprAst(); :}
%%
NotIs :=
	bangis; {: ret = this.notIsAst(); :}

IsNotIs :=
	is; {: ret = this.isNotIsAst(); :}
	| bangis; {: ret = this.isNotIsAst(); :}
%%

ShiftExpression :=
	AddExpression;
	| ShiftExpression leftshift AddExpression; {: ret = this.shiExprAst(); :}
	| ShiftExpression rightshift AddExpression; {: ret = this.shiExprAst(); :}
	| ShiftExpression unsignedrightshift AddExpression; 
		{: ret = this.shiExprAst(); :}

AddExpression :=
	MulExpression;
	| AddExpression plus MulExpression; {: ret = this.addExprAst(); :}
	| AddExpression minus MulExpression; {: ret = this.addExprAst(); :}

MulExpression :=
	UnaryExpression;
	| MulExpression star UnaryExpression; {: ret = this.mulExprAst(); :}
	| MulExpression div UnaryExpression; {: ret = this.mulExprAst(); :}
	| MulExpression modulo UnaryExpression; {: ret = this.mulExprAst(); :}

UnaryExpression :=
	PostfixExpression;
	| increment UnaryExpression; {: ret = this.unExprAst(); :}
	| decrement UnaryExpression; {: ret = this.unExprAst(); :}
	| minus UnaryExpression; {: ret = this.unExprAst(); :}
	| plus UnaryExpression; {: ret = this.unExprAst(); :}
	| star UnaryExpression; {: ret = this.unExprAst(); :}

PostfixExpression :=
	integer; {: ret = this.posExprAst(); :}
	| float; {: ret = this.posExprAst(); :}
